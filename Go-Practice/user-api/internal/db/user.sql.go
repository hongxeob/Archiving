// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*)
FROM users
`

// 사용자 수 조회
func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (name, email)
VALUES (?, ?)
`

type CreateUserParams struct {
	Name  string `db:"name" json:"name"`
	Email string `db:"email" json:"email"`
}

// 사용자 생성 (MySQL의 LAST_INSERT_ID() 활용)
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.Name, arg.Email)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = ?
`

// 사용자 삭제
func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many

SELECT id, name, email, created_at, updated_at
FROM users
ORDER BY created_at DESC
`

// SQLC가 자동으로 Go 코드를 생성할 SQL 쿼리들
// 모든 사용자 조회 (Java의 @Select와 유사하지만 타입 안전성 보장)
func (q *Queries) GetAllUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, created_at, updated_at
FROM users
WHERE email = ?
`

// 이메일로 사용자 조회
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, created_at, updated_at
FROM users
WHERE id = ?
`

// ID로 사용자 조회 (존재하지 않으면 sql.ErrNoRows 반환)
func (q *Queries) GetUserByID(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUsersPaginated = `-- name: GetUsersPaginated :many
SELECT id, name, email, created_at, updated_at
FROM users
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type GetUsersPaginatedParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

// 페이지네이션 지원 사용자 목록
func (q *Queries) GetUsersPaginated(ctx context.Context, arg GetUsersPaginatedParams) ([]*User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name       = ?,
    email      = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserParams struct {
	Name  string `db:"name" json:"name"`
	Email string `db:"email" json:"email"`
	ID    int64  `db:"id" json:"id"`
}

// 사용자 정보 업데이트
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	return err
}

const updateUserPartial = `-- name: UpdateUserPartial :exec
UPDATE users
SET name       = CASE WHEN ? != '' THEN ? ELSE name END,
    email      = CASE WHEN ? != '' THEN ? ELSE email END,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPartialParams struct {
	Column1 interface{} `db:"column_1" json:"column_1"`
	Name    string      `db:"name" json:"name"`
	Column3 interface{} `db:"column_3" json:"column_3"`
	Email   string      `db:"email" json:"email"`
	ID      int64       `db:"id" json:"id"`
}

// 부분 업데이트 (NULL 체크 포함)
func (q *Queries) UpdateUserPartial(ctx context.Context, arg UpdateUserPartialParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPartial,
		arg.Column1,
		arg.Name,
		arg.Column3,
		arg.Email,
		arg.ID,
	)
	return err
}
