// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, content, author)
VALUES ($1, $2, $3)
RETURNING id, title, content, author, view_count, created_at, updated_at
`

type CreatePostParams struct {
	Title   string      `db:"title" json:"title"`
	Content pgtype.Text `db:"content" json:"content"`
	Author  string      `db:"author" json:"author"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, createPost, arg.Title, arg.Content, arg.Author)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.ViewCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one

SELECT id, title, content, author, view_count, created_at, updated_at
FROM posts
WHERE id = $1
`

// 게시글 관련 쿼리 정의
// Spring Data JPA의 @Query와 유사하지만 더 명시적
func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.ViewCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT id, title, content, author, view_count, created_at, updated_at
FROM posts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPostsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Author,
			&i.ViewCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsCount = `-- name: GetPostsCount :one
SELECT COUNT(*)
FROM posts
`

func (q *Queries) GetPostsCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getPostsCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const incrementViewCount = `-- name: IncrementViewCount :one
UPDATE posts
SET view_count = view_count + 1
WHERE id = $1
RETURNING view_count
`

func (q *Queries) IncrementViewCount(ctx context.Context, id int64) (pgtype.Int4, error) {
	row := q.db.QueryRow(ctx, incrementViewCount, id)
	var view_count pgtype.Int4
	err := row.Scan(&view_count)
	return view_count, err
}

const searchPosts = `-- name: SearchPosts :many
SELECT id, title, content, author, view_count, created_at, updated_at
FROM posts
WHERE title ILIKE '%' || $1 || '%' OR content ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchPostsParams struct {
	Column1 pgtype.Text `db:"column_1" json:"column_1"`
	Limit   int32       `db:"limit" json:"limit"`
	Offset  int32       `db:"offset" json:"offset"`
}

func (q *Queries) SearchPosts(ctx context.Context, arg SearchPostsParams) ([]Post, error) {
	rows, err := q.db.Query(ctx, searchPosts, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Author,
			&i.ViewCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2, content = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, content, author, view_count, created_at, updated_at
`

type UpdatePostParams struct {
	ID      int64       `db:"id" json:"id"`
	Title   string      `db:"title" json:"title"`
	Content pgtype.Text `db:"content" json:"content"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.ID, arg.Title, arg.Content)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Author,
		&i.ViewCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
